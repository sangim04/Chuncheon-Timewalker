using UnityEngine;
using System;

public class ThoughtBehavior : MonoBehaviour
{
    [Header("Orbit Settings")]
    public bool isGoodThought = true;
    public float orbitSpeed = 20f;        // ÌöåÏ†Ñ ÏÜçÎèÑ
    public float orbitRadius = 0.65f;     // ÌöåÏ†Ñ Î∞òÍ≤Ω
    public float floatAmplitude = 0.03f;  // ÏÉÅÌïò ÏßÑÎèô Ìè≠
    public float floatSpeed = 1.0f;       // ÏÉÅÌïò ÏßÑÎèô ÏÜçÎèÑ

    [Header("Vertical Layer Settings")]
    public int layerCount = 4;             // üîπ Ï∏µ Í∞úÏàò
    public float layerSpacing = 0.2f;      // üîπ Ï∏µ ÏÇ¨Ïù¥ ÎÜíÏù¥ Í∞ÑÍ≤©
    public float layerRandomOffset = 0.05f; // üîπ Ï∏µ ÎÇ¥ ÎûúÎç§ Ïò§Ï∞®

    public Action onDestroyed; // ÌååÍ¥¥ Ïù¥Î≤§Ìä∏

    private Transform player;
    private float baseY;   // Í∏∞Î≥∏ ÎÜíÏù¥
    private float angle;   // ÌöåÏ†Ñ Í∞ÅÎèÑ

    void Start()
    {
        player = Camera.main.transform;

        // üîπ Ï∏µ ÎûúÎç§ ÏÑ†ÌÉù (0~layerCount-1)
        int chosenLayer = UnityEngine.Random.Range(0, layerCount);

        // ÏòàÏãú: 4Ï∏µÏùº Îïå -0.3, -0.1, +0.1, +0.3 Ïù¥Îü∞ ÏãùÏúºÎ°ú Î∂ÑÌè¨
        float startY = -0.3f + (chosenLayer * layerSpacing);

        // üîπ Ï∏µ ÎÇ¥ÏóêÏÑú ÎûúÎç§ Ïò§Ï∞® Ï∂îÍ∞Ä
        float randomOffset = UnityEngine.Random.Range(-layerRandomOffset, layerRandomOffset);

        // üîπ ÌîåÎ†àÏù¥Ïñ¥ ÎÜíÏù¥Ïóê ÏÉÅÎåÄÏ†ÅÏúºÎ°ú ÏúÑÏπò ÏÑ§Ï†ï
        baseY = player.position.y + startY + randomOffset;

        // Ï¥àÍ∏∞ ÏúÑÏπò (ÏãúÏûëÏùÄ angle=0)
        Vector3 offset = new Vector3(Mathf.Cos(0) * orbitRadius, 0, Mathf.Sin(0) * orbitRadius);
        transform.position = player.position + offset;
    }

    void Update()
    {
        if (player == null) return;

        // ÏõêÌòï ÌöåÏ†Ñ
        angle += orbitSpeed * Time.deltaTime;

        // üîπ Ìïú Î∞îÌÄ¥ ÎèåÎ©¥ Ï†úÍ±∞
        if (angle >= 360f)
        {
            onDestroyed?.Invoke();
            Destroy(gameObject);
            return;
        }

        UpdateOrbitPosition();
    }

    void UpdateOrbitPosition()
    {
        Vector3 center = player.position;
        float rad = Mathf.Deg2Rad * angle;

        float x = center.x + Mathf.Cos(rad) * orbitRadius;
        float z = center.z + Mathf.Sin(rad) * orbitRadius;

        // Ï∏µ Í≥†Ï†ï + ÏÇ¥Ïßù ÏÉÅÌïò ÏßÑÎèô
        float y = baseY + Mathf.Sin(Time.time * floatSpeed) * floatAmplitude;

        transform.position = new Vector3(x, y, z);
        transform.LookAt(center);
        transform.Rotate(0, 180f, 0);
    }

    private void OnTriggerEnter(Collider other)
    {
        if (other.CompareTag("Hand"))
        {
            ThoughtGameManager.Instance.OnThoughtTouched(this);
            onDestroyed?.Invoke();
            Destroy(gameObject);
        }
    }
}
